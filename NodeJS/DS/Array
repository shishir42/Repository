http://www.geeksforgeeks.org/fundamentals-of-algorithms/
http://www.geeksforgeeks.org/data-structures/

1) Duplicate element in Array

  - execute two loops (outer and inner)
  - TC O(n2)
  - SC O(1)
  - Using Sort
  - execute only one loop
  - TC O(nlogn)
  - SC O(1)
  - Using Hash Tables
  - TC O(n)
  - SC O(n)
  - AT O(1)

2) Find element which appears maximum number of times in Array

   - execute two loops (outer and inner) and make a counter and update when match
   - TC O(n2)
   - SC O(1)
   - Using Sort
   - execute only one loop
   - TC O(nlogn)
   - SC O(1)
   - Using Hash Tables
   - TC O(n)
   - SC O(n)

3) Find the first element in the array which is repeated. A = {3, 2,, 1, 2, 2, 3} - 3 not 2

  - execute two loops (outer and inner)
  - TC O(n2)
  - SC O(1)
  - Sorting will failed
  - Hashtable - Behaviour need to changed
  - Negatation technique will failed

4) Find the missing number

  - execute two loops (outer and inner)
  - Keep a bool variable for matching
  - if match then update the bool variable
  - Once inner loop is finished then check for bool variable and return index
  - TC O(n2)
  - SC O(1)
  - Use sorting mechanism will give the elements in increasing order
  - scan once more to find missing number
  - TC O(nlogn)
  - SC O(1)
  - Using hashing technique
  - TC O(n)
  - SC O(n)
  - Using summation formula
  - n*(n + 1) / 2
  - subtract all the numbers from sum and you will get missing number
  - O(n)
  - Integer overflow may come in summation
  - XOR all the array elements, let result be x
  - XOR all numbers from 1 to n, let XOR be y
  - XOR of X and Y gives the missing number
  - TC O(n)
  - SC O(1)

  5) Find number occurring odd number of times
    - Bitwise XOR of all elements
    - Get the number which has odd occurrences
    - A XOR A = 0
    - TC O(n)
    - SC O(1)

  6) Two repeating element in an array
    - Execute two loops (outer and inner)
    - Check for equality if(A[i] == A[j])
    - TC O(n2)
    - SC O(1)
    - Using Sorting technique
    - TC O(nlogn)
    - SC O(1)
    - using Hashmap
    - TC O(n)
    - SC O(n)
    - Using XOR operation
    - TC O(n)
    - SC O(1)
    - Using two mathematical equation
    -  X + Y = n(n + 1)/2 - S & XY = n!/p
    - TC O(n)
    - SC O(1)

  7) Find two element in the array such that their sum is equal to given element k

    - check if(A[i] + A[j] == k)
    - O(n2)
    - O(1)
    - Using Sorting technique and non sorting
    - Maintain lowIndex = 0 and highIndex = n - 1 and compute A[lowIndex] + A[highIndex] == k
    - if sum is less than k, then decrement highIndex
    - if sum is greater than k, then increment lowIndex
    - TC O(nlogn)
    - SC O(n)
    - Using Hashtable
    - For each element of the input array, insert into hash table , say the current element A[x]
    - Before proceeding to the next element check K - A[x] also exists in the hash table or not
    - Existence of such number indicates that we are able to find the indexes
    - Otherwise proceed to the next input element
    - TC O(n)
    - SC O(n)

    8) A[i2] + B[j2] = C[k2]

    - Sort the given array in place
    - For each array index i compute A[i2] and store in array
    - search for 2 numbers of array from 0 to i -1 which adds to A[i]. This will
       give us the result in O(n) time. If we find such sum return true otherwise continue
    - TC O(n2)
    - SC O(1)

    9) Find two elements whose sum closest to zero
    - Brute force technique
    - Execute two loops (Outer and inner)
    - Initialize value min_i = 0, min_j = 1, min_sum = A[0] + A[1];
    - compute sum = a[i] + a[j]
    - if(Math.abs(min_sum) > Math.abs(sum)) --
    - min_sum = sum, min_i = i, min_j = j
    - TC o(n2)
    - SC O(1)

    10) Find an element in  the array
    - Find out the pivot point and divide the array in two sub arrays
    - Now call binary search for one of the two sub-arrays
          a) if element is greater than first element then search in left subarray
          b) else search in right subarray
    - If element is found in selected sub array then return index else return -1
    - TC O(nlogn)
    - Solved in one scan (Binary Search Rotated)
    - TC (logn)

    11) Given an sorted array possibly with duplicate values, find the index of first occurrence of number
    - Use Binary Search
    - check for if(high >= low)
    - compute mid = low + (high - low) / 2;
    - satisfy the condition
    - if((mid == low && A[mid] == data) || (A[mid] == data && A[mid - 1] < data) return mid
    - if(A[mid] <= data) - return BinarySearch(A, low, mid-1 data)
    - else - return BinarySearch(A, mid+1, high data)
    - TC O(logn)

    12) Given an sorted array possibly with duplicate values, find the index of last occurrence of number
    - Use Binary Search
    - check for if(high >= low)
    - compute mid = low + (high - low) / 2;
    - satisfy the condition
    - if((mid == high && A[mid] == data) || (A[mid] == data && A[mid + 1] > data) return mid
    - if(A[mid] <= data) - return BinarySearch(A, mid + 1, high, data)
    - else - return BinarySearch(A, low, mid - 1, data)
    - TC O(logn)

    13) Given an sorted array possibly with duplicate values, find the number of occurrence of a number
    - Do a linear search over the array
    - maintain a increment count
    - compare the element with search data
    - TC O(n)
    - DO a binary search for the data and lets assume position is K
    - Now traverse towards left from k and count the number of occurrences of data. Let this count be leftCount
    - Similarly, traverse towards right and count the number of occurrences of data. Let this count be rightCount
    - Total number of occurrences = leftCount + 1 + rightCount
    - TC O(logn + S) where s is number of occurrences of data
    - Find first occurrence of data and calls its index
    - Find last occurrence of data and calls its index
    - Return lastOccurrence - firstOccurrence + 1
    - TC O(logn)

    14) Second Smallest number efficiently
    - Check priority queue

    15) Majority Array
    - Execute two loops
    - Keep the track of maximum count
    - If max count greater than n/2
    - break the loops
    - return the element having maximum count
    - TC O(n2)
    - SC O(1)
    - Using Binary Search
    - TC O(nlogn)
    - Sort the input array
    - Scan the sorted array
    - Find the majority array
    - Use linear selection to find the median m of A
    - Do one more pass through A and count the occurrence of m
    - if m occurs more than n/2 times then return true
    - Otherwise return false


    int MajorityNum(int[] A, int n){
      int majNum, count = 0, element = -1;
      for(int i=0; i<n; i++){
        if(count == 0){
          element = A[i];
          count = 1;
        }else if(element == A[i]){
          count++;
        }else{
          count--;
        }
      }

    return element;
    }

    16) Throwing eggs from n- story building
      - Divide and Conquer

    17) Separate Even and Odd Number
      - Dutch National Flag Problem
      - Problem is similar to separate 0's and 1's
      - Logic is similar to Quick Sort
      - Initialize two index variable left and right: left = 0 and right = n - 1
      - Keep incrementing left index until we see an odd number
      - Keep decrementing left index until we see an even number
      - if left < right then swap A[left] and A[right]

      void DutchNationalFlag(int A[], int n){
        int left = 0, right = n - 1;
        while(left < right){
            /*increment the left index while we see 0 at left*/
            while(A[left] % 2 == 0 && left < right){
              left++;
            }

            /*decrement the right index while we see 1 at right*/
            while(A[right] % 2 == 1 && left < right){
              right--;
            }

            if(left < right){
                swap(&A[left], &A[right]);
                left++;
                right--;
            }
        }
      }


      18) Segregate 0s and 1s in an array
        - Count the number of 0s. Let count be C.
        - Once we have count, we can put C 0s at the beginning and 1s at the remaining n â€“ C positions in array.
        - TC O(n)

    /*Function to put all 0s on left and all 1s on right*/
    void segregate0and1(int arr[], int size)
    {
        /* Initialize left and right indexes */
        int left = 0, right = size - 1;

        while (left < right)
        {
            /* Increment left index while we see 0 at left */
            while (arr[left] == 0 && left < right)
               left++;

            /* Decrement right index while we see 1 at right */
            while (arr[right] == 1 && left < right)
                right--;

            /* If left is smaller than right then there is a 1 at left
               and a 0 at right.  Exchange arr[left] and arr[right]*/
            if (left < right)
            {
                arr[left] = 0;
                arr[right] = 1;
                left++;
                right--;
            }
        }

        19) Sort am array of 0's, 1's and 2's [R's, G's and B's]

        - Sorting012sDutchFlagProblem(int A[], int n){
            int low = 0, mid = 0, high = n-1;
            while(mid <= high){
                switch(A[mid]){
                  case 0:
                      swap(A[low], A[mid]);
                      low++; mid++;
                      break;
                  case 1:
                      mid++;
                      break;
                  case 2:
                      swap(A[mid], A[high]);
                      high--;
                      break;
                }
            }
        }
        - TC O(n)
        - SC O(1)

        20) Maximum difference between two elements
        - Refer Divide and Conquer

        21) Find the number of trailing zeros
        - TC O(logn)
        - int NumberOfTrailingZeroNumber(int n){
          int i, count = 0;
          if(n < 0){
            return -1 ;
          }

          for(i = 5; n/i > 0; i *=5){
            count += n /i
          }
          return count;
        }


        22) Given an array 2n integers in the following format a1a2a3.....an b1b2b3....bn
        Shuffle the array a1b1a2b2a3b3....anbn without any extra memory

        - void shuffleArray(){
            int n = 4, A[] = {1, 3, 5, 7, 2, 4, 6, 8};
            for(int i =0, q = 1, k = n; i < n; i++, k++, q++){
              for(int j = k; j>i + q; j--){
                int tmp = A[j - i];
                A[j - 1] = A[j];
                A[j] = tmp;
              }
            }

            for(int i = 0; i < 2*n ; i++){
              SOP(A[i]);
            }
        }

        - Using Divide and Conquer

        23) PairwiseSorted

        - public boolean isPairwiseSorted(int A[], int n){
            if(n ==0 || n==1){
              return true;
            }

            for(int i =0; i < n-1; i+=2){
              if(A[i] > A[i + 1]){
                return false;
              }
            }
        }

      - TC O(n)
      - SC O(1)
