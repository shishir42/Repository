Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development


Swift provides its own versions of all fundamental C and Objective-C types, including Int for integers, Double and Float for floating-point values, Bool for Boolean values, and String for textual data.

Swift also provides powerful versions of the three primary collection types, Array, Set, and Dictionary

Like C, Swift uses variables to store and refer to values by an identifying name. Swift also makes extensive use of variables whose values can‚Äôt be changed. These are known as constants, and are much more powerful than constants in C.

Swift introduces advanced types not found in Objective-C, such as tuples. Tuples enable you to create and pass around groupings of values. You can use a tuple to return multiple values from a function as a single compound value.


Swift also introduces optional types, which handle the absence of a value. Optionals say either ‚Äúthere is a value, and it equals x‚Äù or ‚Äúthere isn‚Äôt a value at all‚Äù. Using optionals is similar to using nil with pointers in Objective-C, but they work for any type, not just classes. Not only are optionals safer and more expressive than nil pointers in Objective-C, they‚Äôre at the heart of many of Swift‚Äôs most powerful features.

Swift is a type-safe language, which means the language helps you to be clear about the types of values your code can work with.Type safety helps you catch and fix errors as early as possible in the development process.

Declaring Constants and Variables

     let maximumNumberOfLoginAttempts = 10
     var currentLoginAttempt = 0

Type Annotations

You can provide a type annotation when you declare a constant or variable, to be clear about the kind of values the constant or variable can store. Write a type annotation by placing a colon after the constant or variable name, followed by a space, followed by the name of the type to use.

      var welcomeMessage: String

You can define multiple related variables of the same type on a single line, separated by commas, with a single type annotation after the final variable name:

      var red, green, blue: Double

Naming Constants and Variables

  Constant and variable names can contain almost any character, including Unicode characters:
  let œÄ = 3.14159
  let ‰Ω†Â•Ω = "‰Ω†Â•Ω‰∏ñÁïå"
  let üê∂üêÆ = "dogcow"


Unlike a variable, the value of a constant can‚Äôt be changed after it‚Äôs set. Attempting to do so is reported as an error when your code is compiled:

  let languageName = "Swift"
  languageName = "Swift++"
  // This is a compile-time error: languageName cannot be changed.

Printing Constants and Variables

You can print the current value of a constant or variable with the print(_:separator:terminator:) function:

  print(friendlyWelcome)
  // Prints "Bonjour!"

Swift uses string interpolation to include the name of a constant or variable as a placeholder in a longer string, and to prompt Swift to replace it with the current value of that constant or variable. Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:

    print("The current value of friendlyWelcome is \(friendlyWelcome)")
    // Prints "The current value of friendlyWelcome is Bonjour!"


Semicolons

Unlike many other languages, Swift doesn‚Äôt require you to write a semicolon (;) after each statement in your code, although you can do so if you wish. However, semicolons are required if you want to write multiple separate statements on a single line:

    let cat = "üê±"; print(cat)
    // Prints "üê±"


Integers

Integers are whole numbers with no fractional component, such as 42 and -23. Integers are either signed (positive, zero, or negative) or unsigned (positive or zero).

Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms.

Integer Bounds

You can access the minimum and maximum values of each integer type with its min and max properties:

    let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8
    let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8


Floating-Point Numbers

    Double represents a 64-bit floating-point number.
    Float represents a 32-bit floating-point number.

Type Safety and Type Inference

    Swift is a type-safe language. A type safe language encourages you to be clear about the types of values your code can work with. If part of your code requires a String, you can‚Äôt pass it an Int by mistake.

    Because Swift is type safe, it performs type checks when compiling your code and flags any mismatched types as errors. This enables you to catch and fix errors as early as possible in the development process.


    Type-checking helps you avoid errors when you‚Äôre working with different types of values. However, this doesn‚Äôt mean that you have to specify the type of every constant and variable that you declare. If you don‚Äôt specify the type of value you need, Swift uses type inference to work out the appropriate type. Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide.


    Type inference is particularly useful when you declare a constant or variable with an initial value. This is often done by assigning a literal value (or literal) to the constant or variable at the point that you declare it. (A literal value is a value that appears directly in your source code, such as 42 and 3.14159 in the examples below.)

    For example, if you assign a literal value of 42 to a new constant without saying what type it is, Swift infers that you want the constant to be an Int, because you have initialized it with a number that looks like an integer:

        let meaningOfLife = 42
        // meaningOfLife is inferred to be of type Int

        let pi = 3.14159
        // pi is inferred to be of type Double

        let anotherPi = 3 + 0.14159
        // anotherPi is also inferred to be of type Double

        Numeric Literals

Integer literals can be written as:

      A decimal number, with no prefix
      A binary number, with a 0b prefix
      An octal number, with a 0o prefix
      A hexadecimal number, with a 0x prefix

      let decimalInteger = 17
      let binaryInteger = 0b10001       // 17 in binary notation
      let octalInteger = 0o21           // 17 in octal notation
      let hexadecimalInteger = 0x11     // 17 in hexadecimal notation

Integer Conversion

      To convert one specific number type to another, you initialize a new number of the desired type with the existing value. In the example below, the constant twoThousand is of type UInt16, whereas the constant one is of type UInt8. They can‚Äôt be added together directly, because they‚Äôre not of the same type. Instead, this example calls UInt16(one) to create a new UInt16 initialized with the value of one, and uses this value in place of the original:

      let twoThousand: UInt16 = 2_000
      let one: UInt8 = 1
      let twoThousandAndOne = twoThousand + UInt16(one)

Integer and Floating-Point Conversion

      let three = 3
      let pointOneFourOneFiveNine = 0.14159
      let pi = Double(three) + pointOneFourOneFiveNine
      // pi equals 3.14159, and is inferred to be of type Double


Type Aliases

Type aliases define an alternative name for an existing type. You define type aliases with the typealias keyword.

Type aliases are useful when you want to refer to an existing type by a name that is contextually more appropriate, such as when working with data of a specific size from an external source:

      typealias AudioSample = UInt16

Booleans

Swift has a basic Boolean type, called Bool. Boolean values are referred to as logical, because they can only ever be true or false. Swift provides two Boolean constant values, true and false:

      let orangesAreOrange = true
      let turnipsAreDelicious = false

Swift‚Äôs type safety prevents non-Boolean values from being substituted for Bool. The following example reports a compile-time error:

      let i = 1
      if i {
          // this example will not compile, and will report an error
      }

However, the alternative example below is valid:

    let i = 1
    if i == 1 {
        // this example will compile successfully
    }

Tuples

Tuples group multiple values into a single compound value. The values within a tuple can be of any type and don‚Äôt have to be of the same type as each other.

In this example, (404, "Not Found") is a tuple that describes an HTTP status code. An HTTP status code is a special value returned by a web server whenever you request a web page. A status code of 404 Not Found is returned if you request a webpage that doesn‚Äôt exist.

    let http404Error = (404, "Not Found")
    // http404Error is of type (Int, String), and equals (404, "Not Found")

    You can decompose a tuple‚Äôs contents into separate constants or variables, which you then access as usual:

    let (statusCode, statusMessage) = http404Error
    print("The status code is \(statusCode)")
    // Prints "The status code is 404"

    print("The status message is \(statusMessage)")
    // Prints "The status message is Not Found"


If you only need some of the tuple‚Äôs values, ignore parts of the tuple with an underscore (_) when you decompose the tuple:

    let (justTheStatusCode, _) = http404Error
    print("The status code is \(justTheStatusCode)")
    // Prints "The status code is 404"

Alternatively, access the individual element values in a tuple using index numbers starting at zero:

    print("The status code is \(http404Error.0)")
    // Prints "The status code is 404"
    print("The status message is \(http404Error.1)")
    // Prints "The status message is Not Found"

Optionals

You use optionals in situations where a value may be absent. An optional represents two possibilities: Either there is a value, and you can unwrap the optional to access that value, or there isn‚Äôt a value at all.

The example below uses the initializer to try to convert a String into an Int:

    let possibleNumber = "123"
    let convertedNumber = Int(possibleNumber)
    // convertedNumber is inferred to be of type "Int?", or "optional Int"

Because the initializer might fail, it returns an optional Int, rather than an Int. An optional Int is written as Int?, not Int. The question mark indicates that the value it contains is optional, meaning that it might contain some Int value, or it might contain no value at all. (It can‚Äôt contain anything else, such as a Bool value or a String value. It‚Äôs either an Int, or it‚Äôs nothing at all.)


nil

You set an optional variable to a valueless state by assigning it the special value nil:

    var serverResponseCode: Int? = 404
    // serverResponseCode contains an actual Int value of 404
    serverResponseCode = nil
    // serverResponseCode now contains no value

NOTE

You can‚Äôt use nil with nonoptional constants and variables. If a constant or variable in your code needs to work with the absence of a value under certain conditions, always declare it as an optional value of the appropriate type.

If you define an optional variable without providing a default value, the variable is automatically set to nil for you:

var surveyAnswer: String?
// surveyAnswer is automatically set to nil
NOTE

Swift‚Äôs nil isn‚Äôt the same as nil in Objective-C. In Objective-C, nil is a pointer to a nonexistent object. In Swift, nil isn‚Äôt a pointer‚Äîit‚Äôs the absence of a value of a certain type. Optionals of any type can be set to nil, not just object types.


If Statements and Forced Unwrapping

  You can use an if statement to find out whether an optional contains a value by comparing the optional against nil. You perform this comparison with the ‚Äúequal to‚Äù operator (==) or the ‚Äúnot equal to‚Äù operator (!=).

  If an optional has a value, it‚Äôs considered to be ‚Äúnot equal to‚Äù nil:

  if convertedNumber != nil {
    print("convertedNumber contains some integer value.")
  }
  // Prints "convertedNumber contains some integer value."

Once you‚Äôre sure that the optional does contain a value, you can access its underlying value by adding an exclamation mark (!) to the end of the optional‚Äôs name. The exclamation mark effectively says, ‚ÄúI know that this optional definitely has a value; please use it.‚Äù This is known as forced unwrapping of the optional‚Äôs value:

  if convertedNumber != nil {
    print("convertedNumber has an integer value of \(convertedNumber!).")
  }
  // Prints "convertedNumber has an integer value of 123."



  Optional Binding

  You use optional binding to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable. Optional binding can be used with if and while statements to check for a value inside an optional, and to extract that value into a constant or variable, as part of a single action.

  Write an optional binding for an if statement as follows:

    if let constantName = someOptional {
      statements
    }
    You can rewrite the possibleNumber example from the Optionals section to use optional binding rather than forced unwrapping:

    if let actualNumber = Int(possibleNumber) {
      print("\"\(possibleNumber)\" has an integer value of \(actualNumber)")
    } else {
      print("\"\(possibleNumber)\" could not be converted to an integer")
    }
    // Prints ""123" has an integer value of 123"


    if let firstNumber = Int("4"), let secondNumber = Int("42"), firstNumber < secondNumber && secondNumber < 100 {
        print("\(firstNumber) < \(secondNumber) < 100")
    }
    // Prints "4 < 42 < 100"

    if let firstNumber = Int("4") {
        if let secondNumber = Int("42") {
            if firstNumber < secondNumber && secondNumber < 100 {
                print("\(firstNumber) < \(secondNumber) < 100")
            }
        }
    }
    // Prints "4 < 42 < 100"


    Implicitly Unwrapped Optionals

    As described above, optionals indicate that a constant or variable is allowed to have ‚Äúno value‚Äù. Optionals can be checked with an if statement to see if a value exists, and can be conditionally unwrapped with optional binding to access the optional‚Äôs value if it does exist.

    Sometimes it‚Äôs clear from a program‚Äôs structure that an optional will always have a value, after that value is first set. In these cases, it‚Äôs useful to remove the need to check and unwrap the optional‚Äôs value every time it‚Äôs accessed, because it can be safely assumed to have a value all of the time.

    These kinds of optionals are defined as implicitly unwrapped optionals. You write an implicitly unwrapped optional by placing an exclamation mark (String!) rather than a question mark (String?) after the type that you want to make optional.

    Implicitly unwrapped optionals are useful when an optional‚Äôs value is confirmed to exist immediately after the optional is first defined and can definitely be assumed to exist at every point thereafter. The primary use of implicitly unwrapped optionals in Swift is during class initialization, as described in Unowned References and Implicitly Unwrapped Optional Properties.

    An implicitly unwrapped optional is a normal optional behind the scenes, but can also be used like a nonoptional value, without the need to unwrap the optional value each time it‚Äôs accessed. The following example shows the difference in behavior between an optional string and an implicitly unwrapped optional string when accessing their wrapped value as an explicit String:

    let possibleString: String? = "An optional string."
    let forcedString: String = possibleString! // requires an exclamation mark

    let assumedString: String! = "An implicitly unwrapped optional string."
    let implicitString: String = assumedString // no need for an exclamation mark


    You can think of an implicitly unwrapped optional as giving permission for the optional to be unwrapped automatically whenever it‚Äôs used. Rather than placing an exclamation mark after the optional‚Äôs name each time you use it, you place an exclamation mark after the optional‚Äôs type when you declare it.

    NOTE

    If an implicitly unwrapped optional is nil and you try to access its wrapped value, you‚Äôll trigger a runtime error. The result is exactly the same as if you place an exclamation mark after a normal optional that doesn‚Äôt contain a value.



    You can still treat an implicitly unwrapped optional like a normal optional, to check if it contains a value:

    if assumedString != nil {
        print(assumedString)
    }
    // Prints "An implicitly unwrapped optional string."
    You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:

    if let definiteString = assumedString {
        print(definiteString)
    }
    // Prints "An implicitly unwrapped optional string."




    Error Handling

    You use error handling to respond to error conditions your program may encounter during execution.

    In contrast to optionals, which can use the presence or absence of a value to communicate success or failure of a function, error handling allows you to determine the underlying cause of failure, and, if necessary, propagate the error to another part of your program.

    When a function encounters an error condition, it throws an error. That function‚Äôs caller can then catch the error and respond appropriately.

    func canThrowAnError() throws {
        // this function may or may not throw an error
    }
    A function indicates that it can throw an error by including the throws keyword in its declaration. When you call a function that can throw an error, you prepend the try keyword to the expression.

    Swift automatically propagates errors out of their current scope until they‚Äôre handled by a catch clause.

    do {
        try canThrowAnError()
        // no error was thrown
    } catch {
        // an error was thrown
    }
    A do statement creates a new containing scope, which allows errors to be propagated to one or more catch clauses.

    Here‚Äôs an example of how error handling can be used to respond to different error conditions:

    func makeASandwich() throws {
        // ...
    }

    do {
        try makeASandwich()
        eatASandwich()
    } catch SandwichError.outOfCleanDishes {
        washDishes()
    } catch SandwichError.missingIngredients(let ingredients) {
        buyGroceries(ingredients)
    }
    In this example, the makeASandwich() function will throw an error if no clean dishes are available or if any ingredients are missing. Because makeASandwich() can throw an error, the function call is wrapped in a try expression. By wrapping the function call in a do statement, any errors that are thrown will be propagated to the provided catch clauses.

    If no error is thrown, the eatASandwich() function is called. If an error is thrown and it matches the SandwichError.outOfCleanDishes case, then the washDishes() function will be called. If an error is thrown and it matches the SandwichError.missingIngredients case, then the buyGroceries(_:) function is called with the associated [String] value captured by the catch pattern.
