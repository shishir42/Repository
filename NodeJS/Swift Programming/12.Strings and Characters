
A string is a series of characters, such as "hello, world" or "albatross". Swift strings are represented by the String type. The contents of a String can be accessed in various ways, including as a collection of Character values.

Swift‚Äôs String and Character types provide a fast, Unicode-compliant way to work with text in your code.

You can also use strings to insert constants, variables, literals, and expressions into longer strings, in a process known as string interpolation. This makes it easy to create custom string values for display, storage, and printing.

Swift‚Äôs String type is a fast, modern string implementation. Every string is composed of encoding-independent Unicode characters, and provides support for accessing those characters in various Unicode representations.

Swift‚Äôs String type is bridged with Foundation‚Äôs NSString class. Foundation also extends String to expose methods defined by NSString. This means, if you import Foundation, you can access those NSString methods on String without casting.


String Literals

You can include predefined String values within your code as string literals. A string literal is a sequence of characters surrounded by double quotes (").

Use a string literal as an initial value for a constant or variable:

let someString = "Some string literal value"

Multiline String Literals

If you need a string that spans several lines, use a multiline string literal‚Äîa sequence of characters surrounded by three double quotes:

let quotation = """
The White Rabbit put on his spectacles.  "Where shall I begin,
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on
till you come to the end; then stop."
"""

Special Characters in String Literals

String literals can include the following special characters:

The escaped special characters \0 (null character), \\ (backslash), \t (horizontal tab), \n (line feed), \r (carriage return), \" (double quote) and \' (single quote)
An arbitrary Unicode scalar, written as \u{n}, where n is a 1‚Äì8 digit hexadecimal number with a value equal to a valid Unicode code point (Unicode is discussed in Unicode below)

The code below shows four examples of these special characters. The wiseWords constant contains two escaped double quote characters. The dollarSign, blackHeart, and sparklingHeart constants demonstrate the Unicode scalar format:

let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
let blackHeart = "\u{2665}"      // ‚ô•,  Unicode scalar U+2665
let sparklingHeart = "\u{1F496}" // üíñ, Unicode scalar U+1F496


Initializing an Empty String

To create an empty String value as the starting point for building a longer string, either assign an empty string literal to a variable, or initialize a new String instance with initializer syntax:

var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax
// these two strings are both empty, and are equivalent to each other

Find out whether a String value is empty by checking its Boolean isEmpty property:

if emptyString.isEmpty {
    print("Nothing to see here")
}
// Prints "Nothing to see here"


String Mutability

You indicate whether a particular String can be modified (or mutated) by assigning it to a variable (in which case it can be modified), or to a constant (in which case it can‚Äôt be modified):

var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"

let constantString = "Highlander"
constantString += " and another Highlander"
// this reports a compile-time error - a constant string cannot be modified


Strings Are Value Types

Swift‚Äôs String type is a value type. If you create a new String value, that String value is copied when it‚Äôs passed to a function or method, or when it‚Äôs assigned to a constant or variable. In each case, a new copy of the existing String value is created, and the new copy is passed or assigned, not the original version.


Swift‚Äôs copy-by-default String behavior ensures that when a function or method passes you a String value, it‚Äôs clear that you own that exact String value, regardless of where it came from. You can be confident that the string you are passed won‚Äôt be modified unless you modify it yourself.

Behind the scenes, Swift‚Äôs compiler optimizes string usage so that actual copying takes place only when absolutely necessary. This means you always get great performance when working with strings as value types.


Working with Characters

You can access the individual Character values for a String by iterating over the string with a for-in loop:

for character in "Dog!üê∂" {
    print(character)
}
// D
// o
// g
// !
// üê∂


String values can be constructed by passing an array of Character values as an argument to its initializer:

let catCharacters: [Character] = ["C", "a", "t", "!", "üê±"]
let catString = String(catCharacters)
print(catString)
// Prints "Cat!üê±"


String Interpolation

String interpolation is a way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal. You can use string interpolation in both single-line and multiline string literals. Each item that you insert into the string literal is wrapped in a pair of parentheses, prefixed by a backslash (\):

let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5"


Extended Grapheme Clusters

Every instance of Swift‚Äôs Character type represents a single extended grapheme cluster. An extended grapheme cluster is a sequence of one or more Unicode scalars that (when combined) produce a single human-readable character.

let eAcute: Character = "\u{E9}"                         // √©
let combinedEAcute: Character = "\u{65}\u{301}"          // e followed by ÃÅ
// eAcute is √©, combinedEAcute is eÃÅ


String Indices

Each String value has an associated index type, String.Index, which corresponds to the position of each Character in the string.

let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
greeting[greeting.index(before: greeting.endIndex)]
// !
greeting[greeting.index(after: greeting.startIndex)]
// u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index]
// a


Substrings

When you get a substring from a string‚Äîfor example, using a subscript or a method like prefix(_:)‚Äîthe result is an instance of Substring, not another string. Substrings in Swift have most of the same methods as strings, which means you can work with substrings the same way you work with strings. However, unlike strings, you use substrings for only a short amount of time while performing actions on a string. When you‚Äôre ready to store the result for a longer time, you convert the substring to an instance of String. For example:

let greeting = "Hello, world!"
let index = greeting.index(of: ",") ?? greeting.endIndex
let beginning = greeting[..<index]
// beginning is "Hello"

// Convert the result to a String for long-term storage.
let newString = String(beginning)


Like strings, each substring has a region of memory where the characters that make up the substring are stored. The difference between strings and substrings is that, as a performance optimization, a substring can reuse part of the memory that‚Äôs used to store the original string, or part of the memory that‚Äôs used to store another substring. (Strings have a similar optimization, but if two strings share memory, they are equal.) This performance optimization means you don‚Äôt have to pay the performance cost of copying memory until you modify either the string or substring. As mentioned above, substrings aren‚Äôt suitable for long-term storage‚Äîbecause they reuse the storage of the original string, the entire original string must be kept in memory as long as any of its substrings are being used.

In the example above, greeting is a string, which means it has a region of memory where the characters that make up the string are stored. Because beginning is a substring of greeting, it reuses the memory that greeting uses. In contrast, newString is a string‚Äîwhen it‚Äôs created from the substring, it has its own storage. The figure below shows these relationships:

https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Art/stringSubstring_2x.png


NOTE

Both String and Substring conform to the StringProtocol protocol, which means it‚Äôs often convenient for string-manipulation functions to accept a StringProtocol value. You can call such functions with either a String or Substring value.

Comparing Strings

Swift provides three ways to compare textual values: string and character equality, prefix equality, and suffix equality.
