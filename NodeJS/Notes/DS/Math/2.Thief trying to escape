Thief trying to escape(	Cisco | MakeMyTrip)

A thief trying to escape from a jail has to cross N walls each with varying heights. He climbs X feet every time. But, due to the slippery nature of those walls, every times he slips back by Y feet.  Now the task is to calculate the total number of jumps required to cross all walls and escape from the jail.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains two space separated integers X, Y, N. Then in the next line are N space separated values denoting the heights ( Ht[] ) of the walls.

Output:
For each test case in a new line print the total number of jumps.

Constraints:
1<=T<=100
1<= N, X, Y <=100
1<= Ht[] <=1000

Example:
Input:
2
10 1 1
5
4 1 5
6 9 11 4 5

Output:
1
12


import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {

	    Scanner sc = new Scanner(System.in);
	    int T = sc.nextInt();
	    while(T--!=0)
	    {
	        int x= sc.nextInt();
	        int y= sc.nextInt();
	        int n= sc.nextInt();
	        int[] ht = new int[n];
	        for(int i=0;i<n;i++ )
	        ht[i]= sc.nextInt();
	        int res = 0;
	        int fac = x-y;
	        for(int i=0;i<n;i++)
	          {
	             while(ht[i]>x)
	             {
	             res++;
	             ht[i]=ht[i]-fac;
	             }
	             if(ht[i]>0)
	             res++;

	         }
	        System.out.println(res);
	    }

		//code
	}
}
