Largest Fibonacci Subsequence (Facebook)

Given an array with positive number the task to find the largest subsequence from array that contain elements which are Fibonacci numbers.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains an integer N denoting the size of the array. Then in the next line are N space separated values of the array.

Output:
For each test case in a new line print the space separated elements of the  longest fibonacci subsequence.

Constraints:
1<=T<=100
1<=N<=100
1<=A[]<=1000

Example:
Input:
2
7
1 4 3 9 10 13 7
9
0 2 8 5 2 1 4 13 23

Output:
1 3 13
0 2 8 5 2 1 13


With Recursion
int fibo(int in){
 if(n == 0 || n == 1){
  return n
 }else{
  return fibo(n-1) + fibo(n-2);
 }
}

Without Recursion
int fibo(int n){
 if(n <= 1){
  return n;
 }
 int fibo = 1;
 int fiboPrev = 1;
 for(int i = 2; i < n; ++i){
  int temp = fibo;
  fibo += fiboPrev;
  fiboPrev = temp;
 }
 return fibo;
}


class GFG {
    private static Integer[] memo = new Integer[12];

    public static void main(String[] args) {
        memo[0] = 0;
        memo[1] = 1;
        List<Integer> fibNumbers = Arrays.asList(memo);
        //code
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        int value = fibonacci(11);
        while (T > 0) {
            int n = sc.nextInt();
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = sc.nextInt();
            }

            for (int i = 0; i < n; i++) {
                if (fibNumbers.contains(a[i])) {
                    System.out.print(a[i] + " ");
                }
            }
            if (T - 1 > 0) {
                System.out.println();
            }
            T--;
        }
    }

    private static int fibonacci(int n) {
        if (n == 0 || n == 1) {
            return 1;
        } else {
            memo[n] = fibonacci(n - 1) + fibonacci(n - 2);
        }
        return memo[n];
    }
}
